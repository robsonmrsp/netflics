/* generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56 */
package com.robsonmrsp.netflics.service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.robsonmrsp.netflics.core.model.Tenant ;

import com.robsonmrsp.netflics.model.Permission;
import com.robsonmrsp.netflics.persistence.PermissionRepository;
import com.robsonmrsp.netflics.persistence.PermissionSpecificationHelper;
import com.robsonmrsp.netflics.model.filter.FilterPermission;

import com.robsonmrsp.netflics.core.persistence.pagination.Pager;
import com.robsonmrsp.netflics.core.rs.exception.ValidationException;
import com.robsonmrsp.netflics.core.persistence.pagination.SearchParameters;
import com.robsonmrsp.netflics.core.utils.DateUtil;
import com.robsonmrsp.netflics.core.utils.Util;

@Service
@Transactional
public class PermissionServiceImp implements PermissionService {

	public static final Logger LOGGER = LoggerFactory.getLogger(PermissionServiceImp.class);
	
	@Autowired
	PermissionRepository permissionRepository;
	
	public Optional<Permission> get(Integer id) {
		return permissionRepository.findById(id);
	}

	public Pager<Permission> get(SearchParameters<FilterPermission> searchParams) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<Permission> page = permissionRepository.findAll(PermissionSpecificationHelper.filter(searchParams), pageRequest);

		return new Pager<Permission>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}
	
	public Boolean delete(Integer id) {
		Optional<Permission> optional = this.get(id);
		if (optional.isPresent()) {
			permissionRepository.delete(optional.get());
		}
		return true;
	}

	public Permission save(Permission entity) {
		return permissionRepository.save(entity);
	}

	public Permission update(Permission entity) {
		return permissionRepository.save(entity);
	}
}

//generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56
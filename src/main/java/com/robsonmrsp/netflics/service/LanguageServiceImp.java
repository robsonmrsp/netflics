/* generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20 */
package com.robsonmrsp.netflics.service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.robsonmrsp.netflics.core.model.Tenant ;

import com.robsonmrsp.netflics.model.Language;
import com.robsonmrsp.netflics.persistence.LanguageRepository;
import com.robsonmrsp.netflics.persistence.LanguageSpecificationHelper;
import com.robsonmrsp.netflics.model.filter.FilterLanguage;

import com.robsonmrsp.netflics.core.persistence.pagination.Pager;
import com.robsonmrsp.netflics.core.rs.exception.ValidationException;
import com.robsonmrsp.netflics.core.persistence.pagination.SearchParameters;
import com.robsonmrsp.netflics.core.utils.DateUtil;
import com.robsonmrsp.netflics.core.utils.Util;

@Service
@Transactional
public class LanguageServiceImp implements LanguageService {

	public static final Logger LOGGER = LoggerFactory.getLogger(LanguageServiceImp.class);
	
	@Autowired
	LanguageRepository languageRepository;
	
	public Optional<Language> get(Integer id, Tenant tenant) {
		return languageRepository.findOne(LanguageSpecificationHelper.fromId(id, tenant));
	}

	public Pager<Language> get(SearchParameters<FilterLanguage> searchParams, Tenant tenant) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<Language> page = languageRepository.findAll(LanguageSpecificationHelper.filter(searchParams, tenant), pageRequest);

		return new Pager<Language>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}

	public Boolean delete(Integer id, Tenant tenant) {
		Optional<Language> optional = this.get(id, tenant);
		if (optional.isPresent()) {
			languageRepository.delete(optional.get());
		}
		return true;
	}

	public Language save(Language entity) {
		return languageRepository.save(entity);
	}

	public Language update(Language entity) {
		return languageRepository.save(entity);
	}
}

//generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20
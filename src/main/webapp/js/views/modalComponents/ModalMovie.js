/* generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20 */
define(function(require) {
	var util = require('utilities/utils');
	var JSetup = require('views/components/JSetup');
	var Movie = require('models/Movie');
	
	var ModalMovieTemplate = require('text!views/modalComponents/tpl/ModalMovieTemplate.html');


	var MovieModal = JSetup.View.extend({
		template : _.template(ModalMovieTemplate),

		/** The declared form Regions. */
		regions : {
			dataTableMovieRegion : '.datatable-movie',
		},
		
		/** The form events you'd like to listen */
		events : {
			'click .btnSearchMovie' : 'searchMovie',
			'click .btnClearMovie' : 'clearModal',
			'click tr' : 'selectRow',
			'keypress' : 'treatKeypress',
		},

		/** All the important fields must be here. */		
		ui : {
			loadButton : '.button-loading',
    		inputModalSinopsis : '.inputModalSinopsis',
    		inputModalReleaseDate : '.inputModalReleaseDate',
			groupInputModalReleaseDate : '.groupInputModalReleaseDate',
    		inputModalBudget : '.inputModalBudget',
    		inputModalTitle : '.inputModalTitle',
		
			form : '#formSearchMovie',
			modalScreen : '.modal',
		},
		treatKeypress : function (e){
		    if (util.enterPressed(e)) {
	    		e.preventDefault();
	    		this.searchMovie();
	    	}
		},

		/** First function called, like a constructor. */
		initialize : function(opt) {
			var that = this;

			this.onSelectModel = opt.onSelectModel;
			this.suggestConfig = opt.suggestConfig;

			this.movieCollection = new Movie.PageCollection();
			this.movieCollection.state.pageSize = 5;
			this.movieCollection.on('fetching', this.startFetch, this);
			this.movieCollection.on('fetched', this.stopFetch, this);
			
			this.dataTableMovie = new JSetup.DataTable({
				row : JSetup.RowClick,
				columns : this.getColumns(),
				collection : this.movieCollection,
			});
			this.setValue(opt.initialValue);
		},
		
		/** Called after DOM´s ready.*/
		onShowView :  function() {
			var that = this;
		  	
			this.ui.inputModalReleaseDate.date();
			this.ui.groupInputModalReleaseDate.date();
		  	
			this.ui.inputModalBudget.decimal();
		  	
		  	
	
			that.dataTableMovieRegion.show(this.dataTableMovie);
					
			if (that.suggestConfig) {
				that.suggestConfig.collection = that.movieCollection;
				that.suggestConfig.onSelect = function(json) {
					var model = new JSetup.BaseModel(json)
					that.onSelectModel(model);
					if (json) {
						that.modelSelect = model
					} else
						that.modelSelect = null;
				}
				util.configureSuggest(that.suggestConfig);
				that.suggestConfig.field.change(function(e) {
					if(!that.suggestConfig.field.val()){
						that.clear();
					}
				})
			}		
		},

		searchMovie : function() {
			var that = this;
			this.movieCollection.filterQueryParams = {
	    		sinopsis : this.ui.inputModalSinopsis.escape(), 
	    		releaseDate : this.ui.inputModalReleaseDate.escape(), 
		    	budget : this.ui.inputModalBudget.escape(true),
	    		title : this.ui.inputModalTitle.escape(), 
			};

			this.movieCollection.getFirstPage({
				resetState : true,
				success : function(_coll, _resp, _opt) {
					//caso queira algum tratamento de sucesso adicional
				},
				error : function(_coll, _resp, _opt) {
					console.error(_coll, _resp, _opt)
				}
			});
		},

		selectRow : function(e) {
			var modelMovie = util.getWrappedModel(e);
			if (modelMovie){
				this.modelSelect = modelMovie; 
				this.onSelectModel(modelMovie);
			}
		},
		
		getJsonValue : function() {
			if (_.isEmpty(this.modelSelect) && _.isEmpty(this.jsonValue)) {
				return null;
			}
			if (this.modelSelect) {
				return this.modelSelect.toJSON();
			} else {
				return this.jsonValue;
			}
		},
		
		getRawValue : function() {
			var json = this.getJsonValue();
			if(json )
				return json.id
			return null;
		},
		
		getValue : function() {
			return this.modelSelect;
		},

		setValue : function(value) {
			this.jsonValue = value;
		},

		getColumns : function() {
			var columns = [	

		{
				name : "sinopsis",
				sortable : true,
				editable : false,
				label 	 : "Sinopsis",
				cell : JSetup.CustomStringCell
			}, 
					{
				name : "releaseDate",
				sortable : true,
				editable : false,
				label 	 : "Release date",
				cell : JSetup.CustomStringCell
			}, 
					{
				name : "budget",
				sortable : true,
				editable : false,
				label 	 : "Budget",
		  		cell : JSetup.DecimalCell,	
			}, 
					{
				name : "title",
				sortable : true,
				editable : false,
				label 	 : "Title",
				cell : JSetup.CustomStringCell
			}, 
						];
			return columns;
		},

		hidePage : function() {
			this.ui.modalScreen.modal('hide');
		},

		showPage : function() {
			this.clearModal();
			this.ui.modalScreen.modal('show');
			
			this.searchMovie();
		},

		clear : function() {
			this.clearModal();
		},
		clearModal : function() {
			this.modelSelect = null;
			this.jsonValue = null;
			this.movieCollection.reset();
			util.scrollUpModal();
			this.ui.form.get(0).reset();
		},
		
		// Executada depois da consulta concluida.
		stopFetch : function() {
			this.ui.loadButton.button('reset');
			util.stopSpinner();
			util.scrollDownModal();
		},
		
		// Executada Antes da realização da consulta.
		startFetch : function() {
			this.ui.loadButton.button('loading');
			util.showSpinner('spinMovie');
		},
	});

	return MovieModal;
});

/* generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56 */
define(function(require) {
	var $ = require('adapters/jquery-adapter');
	var _ = require('adapters/underscore-adapter');
	var Backbone = require('adapters/backbone-adapter');
	var Marionette = require('marionette');
	var AppScripts = require('AppScripts');
	
	var util = require('utilities/utils');
	
	// var AuthHandlerUtil = require('utilities/AuthHandlerUtil');
	
	
	var PageGenre = require('views/genre/PageGenre');
	var FormGenre = require('views/genre/FormGenre');
	var Genre = require('models/Genre');
	
	var PageMovie = require('views/movie/PageMovie');
	var FormMovie = require('views/movie/FormMovie');
	var Movie = require('models/Movie');
	
	var PageLanguage = require('views/language/PageLanguage');
	var FormLanguage = require('views/language/FormLanguage');
	var Language = require('models/Language');
	
	var PageActor = require('views/actor/PageActor');
	var FormActor = require('views/actor/FormActor');
	var Actor = require('models/Actor');
	
	var PageUser = require('views/user/PageUser');
	var FormUser = require('views/user/FormUser');
	var User = require('models/User');
	
	var PageRole = require('views/role/PageRole');
	var FormRole = require('views/role/FormRole');
	var Role = require('models/Role');
	
	var PagePermission = require('views/permission/PagePermission');
	var FormPermission = require('views/permission/FormPermission');
	var Permission = require('models/Permission');
	
	var PageGroup = require('views/group/PageGroup');
	var FormGroup = require('views/group/FormGroup');
	var Group = require('models/Group');
	
	var PageItem = require('views/item/PageItem');
	var FormItem = require('views/item/FormItem');
	var Item = require('models/Item');
	
	util.NProgress.setBlockerPanel('block_panel');
	
	var CustomRegion = Marionette.Region.extend({
		el : "#page-content",
		attachHtml : function(view) {
			this.$el.hide();
			this.$el.html(view.el);
			util.scrollTop();
			this.$el.fadeIn(600);
			view.listenTo(view, 'show', function() {
				AppScripts.prepare();

				// AuthHandlerUtil.handlePermissions(); removed
				setTimeout(function() {
					util.NProgress.done(false, true);
				}, 100);
			});
		},
	});

	var AppRouter = Backbone.Router.extend({
		routes : {
			'' : 'index',
			// hashs de Genre
			'app/genres' : 'genres',
			'app/newGenre' : 'newGenre',
			'app/editGenre/:id' : 'editGenre',
			// hashs de Movie
			'app/movies' : 'movies',
			'app/newMovie' : 'newMovie',
			'app/editMovie/:id' : 'editMovie',
			// hashs de Language
			'app/languages' : 'languages',
			'app/newLanguage' : 'newLanguage',
			'app/editLanguage/:id' : 'editLanguage',
			// hashs de Actor
			'app/actors' : 'actors',
			'app/newActor' : 'newActor',
			'app/editActor/:id' : 'editActor',
			// hashs de User
			'app/users' : 'users',
			'app/newUser' : 'newUser',
			'app/editUser/:id' : 'editUser',
			// hashs de Role
			'app/roles' : 'roles',
			'app/newRole' : 'newRole',
			'app/editRole/:id' : 'editRole',
			// hashs de Permission
			'app/permissions' : 'permissions',
			'app/newPermission' : 'newPermission',
			'app/editPermission/:id' : 'editPermission',
			// hashs de Group
			'app/groups' : 'groups',
			'app/newGroup' : 'newGroup',
			'app/editGroup/:id' : 'editGroup',
			// hashs de Item
			'app/items' : 'items',
			'app/newItem' : 'newItem',
			'app/editItem/:id' : 'editItem',
		},
		initialize : function() {
		    // this.authHandler = new AuthHandlerUtil.Model();
			this.App = new Marionette.Application();
			this.App.addRegions({
				mainRegion : CustomRegion
			});
			this.on('route', function(abc) {
				util.NProgress.start(true);
			});
		},
		route : function(route, name, callback) {
			var router = this;
			if (!_.isRegExp(route))
				route = this._routeToRegExp(route);
			if (_.isFunction(name)) {
				callback = name;
				name = '';
			}
			if (!callback)
				callback = this[name];
			Backbone.history.route(route, function(fragment) {
				var args = router._extractParameters(route, fragment);
				router.App.mainRegion.reset();
				//if (router.authHandler.canSeeScreen(fragment)) {
					router.execute(callback, args);
					router.trigger.apply(router, [ 'route:' + name ].concat(args));
					router.trigger('route', name, args);
					Backbone.history.trigger('route', router, name, args);
				//} else {
				//	router.App.mainRegion.show(new AuthHandlerUtil.PageAcessoNegado());
				//}
			});
			
			return this;
		},

		index : function(path) {
			util.markActiveItem('dashboard');
			//AuthHandlerUtil.handlePermissions();
			setTimeout(function() {
				util.NProgress.done(false, true);
			}, 500);
		},
		
		//configuração das rotas de Genre
		genres: function() {
			util.markActiveItem('genres');
			this.pageGenre = new PageGenre();
			this.App.mainRegion.show(this.pageGenre);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Genre',
				itemSubFolderName : 'Listagem',
				url : 'app/genres'
			});
		},

		newGenre: function() {
			util.markActiveItem('genres');
			var formGenre = new FormGenre({
				model : new Genre.Model(),
			});
			this.App.mainRegion.show(formGenre);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Genre',
				itemSubFolderName : 'Formulário de cadastro de Genre',
				url : 'app/genres'
			});
		},
		
		editGenre: function(idGenre) {
			var that = this;
			util.markActiveItem('genres');
			var model = new Genre.Model({
				id : idGenre,
			})
			model.fetch({
				success : function(model) {
					var formGenre = new FormGenre({
						model : model,
					});
					that.App.mainRegion.show(formGenre);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Genres',
				itemSubFolderName : 'Formulário de atualização de Genre',
				url : 'app/genres'
			});
		},
		
		//configuração das rotas de Movie
		movies: function() {
			util.markActiveItem('movies');
			this.pageMovie = new PageMovie();
			this.App.mainRegion.show(this.pageMovie);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Movie',
				itemSubFolderName : 'Listagem',
				url : 'app/movies'
			});
		},

		newMovie: function() {
			util.markActiveItem('movies');
			var formMovie = new FormMovie({
				model : new Movie.Model(),
			});
			this.App.mainRegion.show(formMovie);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Movie',
				itemSubFolderName : 'Formulário de cadastro de Movie',
				url : 'app/movies'
			});
		},
		
		editMovie: function(idMovie) {
			var that = this;
			util.markActiveItem('movies');
			var model = new Movie.Model({
				id : idMovie,
			})
			model.fetch({
				success : function(model) {
					var formMovie = new FormMovie({
						model : model,
					});
					that.App.mainRegion.show(formMovie);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Movies',
				itemSubFolderName : 'Formulário de atualização de Movie',
				url : 'app/movies'
			});
		},
		
		//configuração das rotas de Language
		languages: function() {
			util.markActiveItem('languages');
			this.pageLanguage = new PageLanguage();
			this.App.mainRegion.show(this.pageLanguage);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Language',
				itemSubFolderName : 'Listagem',
				url : 'app/languages'
			});
		},

		newLanguage: function() {
			util.markActiveItem('languages');
			var formLanguage = new FormLanguage({
				model : new Language.Model(),
			});
			this.App.mainRegion.show(formLanguage);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Language',
				itemSubFolderName : 'Formulário de cadastro de Language',
				url : 'app/languages'
			});
		},
		
		editLanguage: function(idLanguage) {
			var that = this;
			util.markActiveItem('languages');
			var model = new Language.Model({
				id : idLanguage,
			})
			model.fetch({
				success : function(model) {
					var formLanguage = new FormLanguage({
						model : model,
					});
					that.App.mainRegion.show(formLanguage);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Languages',
				itemSubFolderName : 'Formulário de atualização de Language',
				url : 'app/languages'
			});
		},
		
		//configuração das rotas de Actor
		actors: function() {
			util.markActiveItem('actors');
			this.pageActor = new PageActor();
			this.App.mainRegion.show(this.pageActor);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Actor',
				itemSubFolderName : 'Listagem',
				url : 'app/actors'
			});
		},

		newActor: function() {
			util.markActiveItem('actors');
			var formActor = new FormActor({
				model : new Actor.Model(),
			});
			this.App.mainRegion.show(formActor);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Actor',
				itemSubFolderName : 'Formulário de cadastro de Actor',
				url : 'app/actors'
			});
		},
		
		editActor: function(idActor) {
			var that = this;
			util.markActiveItem('actors');
			var model = new Actor.Model({
				id : idActor,
			})
			model.fetch({
				success : function(model) {
					var formActor = new FormActor({
						model : model,
					});
					that.App.mainRegion.show(formActor);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Actors',
				itemSubFolderName : 'Formulário de atualização de Actor',
				url : 'app/actors'
			});
		},
		
		//configuração das rotas de User
		users: function() {
			util.markActiveItem('users');
			this.pageUser = new PageUser();
			this.App.mainRegion.show(this.pageUser);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Usuário',
				itemSubFolderName : 'Listagem',
				url : 'app/users'
			});
		},

		newUser: function() {
			util.markActiveItem('users');
			var formUser = new FormUser({
				model : new User.Model(),
			});
			this.App.mainRegion.show(formUser);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Usuário',
				itemSubFolderName : 'Formulário de cadastro de Usuário',
				url : 'app/users'
			});
		},
		
		editUser: function(idUser) {
			var that = this;
			util.markActiveItem('users');
			var model = new User.Model({
				id : idUser,
			})
			model.fetch({
				success : function(model) {
					var formUser = new FormUser({
						model : model,
					});
					that.App.mainRegion.show(formUser);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Users',
				itemSubFolderName : 'Formulário de atualização de Usuário',
				url : 'app/users'
			});
		},
		
		//configuração das rotas de Role
		roles: function() {
			util.markActiveItem('roles');
			this.pageRole = new PageRole();
			this.App.mainRegion.show(this.pageRole);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Papel',
				itemSubFolderName : 'Listagem',
				url : 'app/roles'
			});
		},

		newRole: function() {
			util.markActiveItem('roles');
			var formRole = new FormRole({
				model : new Role.Model(),
			});
			this.App.mainRegion.show(formRole);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Papel',
				itemSubFolderName : 'Formulário de cadastro de Papel',
				url : 'app/roles'
			});
		},
		
		editRole: function(idRole) {
			var that = this;
			util.markActiveItem('roles');
			var model = new Role.Model({
				id : idRole,
			})
			model.fetch({
				success : function(model) {
					var formRole = new FormRole({
						model : model,
					});
					that.App.mainRegion.show(formRole);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Roles',
				itemSubFolderName : 'Formulário de atualização de Papel',
				url : 'app/roles'
			});
		},
		
		//configuração das rotas de Permission
		permissions: function() {
			util.markActiveItem('permissions');
			this.pagePermission = new PagePermission();
			this.App.mainRegion.show(this.pagePermission);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Permissão',
				itemSubFolderName : 'Listagem',
				url : 'app/permissions'
			});
		},

		newPermission: function() {
			util.markActiveItem('permissions');
			var formPermission = new FormPermission({
				model : new Permission.Model(),
			});
			this.App.mainRegion.show(formPermission);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Permissão',
				itemSubFolderName : 'Formulário de cadastro de Permissão',
				url : 'app/permissions'
			});
		},
		
		editPermission: function(idPermission) {
			var that = this;
			util.markActiveItem('permissions');
			var model = new Permission.Model({
				id : idPermission,
			})
			model.fetch({
				success : function(model) {
					var formPermission = new FormPermission({
						model : model,
					});
					that.App.mainRegion.show(formPermission);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Permissions',
				itemSubFolderName : 'Formulário de atualização de Permissão',
				url : 'app/permissions'
			});
		},
		
		//configuração das rotas de Group
		groups: function() {
			util.markActiveItem('groups');
			this.pageGroup = new PageGroup();
			this.App.mainRegion.show(this.pageGroup);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Grupo de Permissões',
				itemSubFolderName : 'Listagem',
				url : 'app/groups'
			});
		},

		newGroup: function() {
			util.markActiveItem('groups');
			var formGroup = new FormGroup({
				model : new Group.Model(),
			});
			this.App.mainRegion.show(formGroup);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Grupo de Permissões',
				itemSubFolderName : 'Formulário de cadastro de Grupo de Permissões',
				url : 'app/groups'
			});
		},
		
		editGroup: function(idGroup) {
			var that = this;
			util.markActiveItem('groups');
			var model = new Group.Model({
				id : idGroup,
			})
			model.fetch({
				success : function(model) {
					var formGroup = new FormGroup({
						model : model,
					});
					that.App.mainRegion.show(formGroup);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Groups',
				itemSubFolderName : 'Formulário de atualização de Grupo de Permissões',
				url : 'app/groups'
			});
		},
		
		//configuração das rotas de Item
		items: function() {
			util.markActiveItem('items');
			this.pageItem = new PageItem();
			this.App.mainRegion.show(this.pageItem);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Item',
				itemSubFolderName : 'Listagem',
				url : 'app/items'
			});
		},

		newItem: function() {
			util.markActiveItem('items');
			var formItem = new FormItem({
				model : new Item.Model(),
			});
			this.App.mainRegion.show(formItem);
			util.breadcrumb({
				iconClass : 'fa-desktop',
				itemLabel : 'Item',
				itemSubFolderName : 'Formulário de cadastro de Item',
				url : 'app/items'
			});
		},
		
		editItem: function(idItem) {
			var that = this;
			util.markActiveItem('items');
			var model = new Item.Model({
				id : idItem,
			})
			model.fetch({
				success : function(model) {
					var formItem = new FormItem({
						model : model,
					});
					that.App.mainRegion.show(formItem);
				},
				error : function(x, y, z) {
					console.error(x, y, z);
				}
			})
			util.breadcrumb({
				iconClass : 'fa-calendar',
				itemLabel : 'Items',
				itemSubFolderName : 'Formulário de atualização de Item',
				url : 'app/items'
			});
		},
		
		start : function() {
			Backbone.history.start();
		}
	});
	return AppRouter;
});

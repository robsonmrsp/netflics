/*  generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20 */
package com.robsonmrsp.netflics.rs;

import static org.springframework.http.HttpStatus.*;
import static org.springframework.http.MediaType.*;
import static org.springframework.web.bind.annotation.RequestMethod.*;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import com.robsonmrsp.netflics.core.json.JsonError;
import com.robsonmrsp.netflics.core.json.JsonPaginator;
import com.robsonmrsp.netflics.json.JsonRole;

import com.robsonmrsp.netflics.model.Role;

import com.robsonmrsp.netflics.service.RoleService;
import com.robsonmrsp.netflics.model.filter.FilterRole;
import com.robsonmrsp.netflics.core.persistence.pagination.Pager;
import com.robsonmrsp.netflics.core.persistence.pagination.SearchParameters;
import com.robsonmrsp.netflics.core.rs.exception.ValidationException;
import com.robsonmrsp.netflics.core.security.SpringSecurityUserContext;

import com.robsonmrsp.netflics.utils.Parser;
@RestController
@RequestMapping("/rs/crud/roles")
@SuppressWarnings({ "unchecked", "rawtypes" })
public class RoleController {
	@Autowired
	RoleService roleService;
	public static final Logger LOGGER = LoggerFactory.getLogger(RoleController.class);

	@RequestMapping(method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity get(@RequestParam MultiValueMap<String, String> mapParams) {
		ResponseEntity response = null;

		Pager<Role> roles = null;
		try {
			SearchParameters<FilterRole> paginationParams = new SearchParameters<FilterRole>(mapParams, FilterRole.class);

			roles = roleService.get(paginationParams);
			
			JsonPaginator<JsonRole> paginator = JsonPaginator.of(Parser.toListJsonRoles(roles.getItems()),
				 roles.getActualPage(), roles.getPageSize(), roles.getOrder(), roles.getOrderBy(),roles.getTotalRecords());

			response = ResponseEntity.ok(paginator);

		} catch (Exception e) {
			String message = String.format("Não foi possivel carregar roles para os parametros %s [%s]", mapParams.toString(), e.getMessage());
			LOGGER.error(message, e);
			response = ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
		}
		return response;
	}
	
	@RequestMapping(value = "{id:\\d+}", method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity get(@PathVariable("id") int id) {
		try {
			Optional<Role> optional = roleService.get(id);
			
			if (optional.isPresent()) {
				return ResponseEntity.ok(Parser.toJson(optional.get()));
			}

			return ResponseEntity.notFound().build();

		} catch (Exception e) {
			String message = String.format("Não foi possivel carregar o registro. [ %s ] parametros [ %d ]", e.getMessage(), id);
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
		}
	}

	@RequestMapping(method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity save(@RequestBody JsonRole jsonRole) {
		try {
			Role role = Parser.toEntity(jsonRole);

			role = roleService.save(role);

			return ResponseEntity.status(CREATED).body(Parser.toJson(role));

		} catch (ValidationException e) {
			String message = String.format("Não foi possivel salvar  o registro [ %s ] parametros [ %s ]", e.getOrigem().getMessage(), jsonRole.toString());
			LOGGER.error(message, e.getOrigem());
			return ResponseEntity.status(BAD_REQUEST).body(new JsonError(e, message, jsonRole, e.getLegalMessage()));
		} catch (Exception e) {
			String message = String.format("Não foi possivel salvar  role [ %s ] parametros [ %s ]", e.getMessage(), jsonRole.toString());
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, jsonRole));

		}
	}

	@RequestMapping(value = "{id:\\d+}", method = PUT, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity update(@PathVariable("id") Integer id, @RequestBody JsonRole jsonRole) {
		try {
			Role role = Parser.toEntity(jsonRole);

			role = roleService.update(role);

			return ResponseEntity.ok(Parser.toJson(role));
		} catch (ValidationException e) {
			String message = String.format("Não foi possivel salvar  o registro [ %s ] parametros [ %s ]", e.getOrigem().getMessage(), jsonRole.toString());
			LOGGER.error(message, e.getOrigem());
			return ResponseEntity.status(BAD_REQUEST).body(new JsonError(e, message, jsonRole, e.getLegalMessage()));
		} catch (Exception e) {
			String message = String.format("Não foi possivel salvar o registro [ %s ] parametros [ %s ]", e.getMessage(), jsonRole.toString());
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, jsonRole));
		}
	}
	
	@RequestMapping(value = "{id:\\d+}", method = DELETE)
	public ResponseEntity delete(@PathVariable("id") Integer id) {
		try {
			roleService.delete(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			String message = String.format("Não foi possivel remover o registro [ %s ] parametros [ %s ]", e.getMessage(), id);
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, id));
		}
	}

}
//generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20

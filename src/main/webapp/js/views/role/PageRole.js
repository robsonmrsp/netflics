/* generated by JSetup v0.95 :  at 3 de jan de 2022 23:41:20 */
define(function(require) {
	var util = require('utilities/utils');
	var JSetup = require('views/components/JSetup');	
	var PageRoleTemplate = require('text!views/role/tpl/PageRoleTemplate.html');

	var Role = require('models/Role');

	var PageRole = JSetup.View.extend({
		template : _.template(PageRoleTemplate),

		/** The declared form Regions. */
		regions : {
			dataTableRoleRegion : '.datatable-role',
		},
		
		/** The form events you'd like to listen */
		events : {
			'click 	.reset-button' : 'resetRole',			
			'keypress' : 'treatKeypress',
			
			'click 	.search-button' : 'searchRole',
			'click  .show-advanced-search-button' : 'toggleAdvancedForm',
		},
		
		/** All the important fields must be here. */		
		ui : {
			loadButton : '.loading-button',
			inputAuthority : '#inputAuthority',
			inputDescription : '#inputDescription',
			form : '#formRoleFilter',
			advancedSearchForm : '.advanced-search-form',
		},
		
		/** First function called, like a constructor. */		
		initialize : function() {
			var that = this;
			this.roles = new Role.PageCollection();
			
			this.dataTableRole = new JSetup.DataTable({
				columns : this.getColumns(),
				collection : this.roles,
				onFetching : this.startFetch,
				onFetched : this.stopFetch,
				view : this
			});			
		},

		/** Called after DOM´s ready.*/		
		onShowView : function() {
			var that = this;
		
			this.dataTableRoleRegion.show(this.dataTableRole);
		
			this.dataTableRole.recoveryLastQuery();
		},
		
		 searchRole : function(){		                                                                   
		 	var that = this;                                                                                                   
		 	this.dataTableRole.getFirstPage({                                                                             
		 		success : function(_coll, _resp, _opt) {                                                                       
		 			//console.info('Consulta para o grid role');                                         
		 		},                                                                                                             
		 		error : function(_coll, _resp, _opt) {                                                                         
		 			//console.error(_resp.responseText || (_resp.getResponseHeader && _resp.getResponseHeader('exception')));  
		 		},                                                                                                             
		 		filterQueryParams : {                                                                                          
		     		authority : this.ui.inputAuthority.escape(),                                   
		     		description : this.ui.inputDescription.escape(),                                   
		 		}                                                                                                              
		 	})                                                                                                                 
		 },																													   
		
		resetRole : function(){
			this.ui.form.get(0).reset();
			this.roles.reset();
		},
				
		getColumns : function() {
			var that = this;
			var columns = [
			{
				name : "authority",
				sortable : true,
				editable : false,
				label 	 : "Autoridade",
				cell : JSetup.CustomStringCell
			}, 
			{
				name : "description",
				sortable : true,
				editable : false,
				label 	 : "Descrição",
				cell : JSetup.CustomStringCell
			}, 
			{
				name : "acoes",
				label : "Ações(Editar, Deletar)",
				editable : false,
				sortable : false,
				cell : JSetup.ActionCell.extend({
					buttons : that.getCellButtons(),
					context : that,
				})
			} ];
			return columns;
		},
		
		getCellButtons : function() {
			var that = this;
			var buttons = [];

			buttons.push({
				id : 'edit_button',
				type : 'primary',
				icon : 'fa-pencil',
				customClass : 'auth[edit-role,disable]',
				hint : 'Editar Papel',
				onClick : that.editModel,
			}, {
				id : 'delete_button',
				type : 'danger',
				customClass : 'auth[delete-role, disable]',
				icon : 'fa-trash',
				hint : 'Remover Papel',
				onClick : that.deleteModel,
			});

			return buttons;
		},

		deleteModel : function(model) {
			var that = this;
			
			var modelTipo = new Role.Model({id : model.id});
			
			util.confirm({
				title : "Importante",
				text : "Tem certeza que deseja remover o registro [ " + model.get('id') + " ] ?",
				onConfirm : function() {
					modelTipo.destroy({
						success : function() {
							that.roles.remove(model);
							util.alert({title : "Concluido", text : "Registro removido com sucesso!"});
						},
					});
				}
			});
		},

		editModel : function(model) {
			util.goPage("app/editRole/" + model.get('id'));
		},

		
		// additional functions
		toggleAdvancedForm : function() {
			this.ui.advancedSearchForm.slideToggle("slow");
		},

		treatKeypress : function(e) {
			if (util.enterPressed(e)) {
				e.preventDefault();
				this.searchRole();
			}
		},
		startFetch : function() {
			util.loadButton(this.ui.loadButton)
		},

		stopFetch : function() {
			util.resetButton(this.ui.loadButton)
		}
	});

	return PageRole;
});

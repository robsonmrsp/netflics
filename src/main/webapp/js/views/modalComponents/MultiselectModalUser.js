/* generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56 */
define(function(require) {
	var util = require('utilities/utils');
	var JSetup = require('views/components/JSetup');
	var MultiselectModalUserTemplate = require('text!views/modalComponents/tpl/MultiselectModalUserTemplate.html');
	var User = require('models/User');
	


	var MultiselectModalUser = JSetup.View.extend({
		template : _.template(MultiselectModalUserTemplate),

		/** The declared form Regions. */
		regions : {
			dataTablePrincipalRegion : 	'.datatable-principal',
			dataTableModalRegion : 		'.datatable-modal',
		},
		
		/** The form events you'd like to listen */
		events : {
			'click .btn-search' : 'search',
			'click .btn-reset' : 'clearModal',
			'keypress' : 'treatKeypress',
		},
		
		/** All the important fields must be here. */		
		ui : {
			loadButton : '.button-loading',
    		inputModalName : '.inputModalName',
    		inputModalUsername : '.inputModalUsername',
    		inputModalEmail : '.inputModalEmail',
    		inputModalPassword : '.inputModalPassword',
    		inputModalEnable : '.inputModalEnable',
    		inputModalImage : '.inputModalImage',
		
			form : '#formSearchUser',
			modalScreen : '.modal',
		},
		treatKeypress : function (e){
		    if (util.enterPressed(e)) {
	    		e.preventDefault();
	    		this.search();
	    	}
		},		
		
		/** First function called, like a constructor. */
		initialize : function(opt) {
			var that = this;
			this.principalCollection = new  User.PageClientCollection(opt.initialValues) ;

			this.modalCollection = new User.PageCollection();
			this.modalCollection.on('fetching', this.startFetch, this);
			this.modalCollection.on('fetched', this.stopFetch, this);
			this.modalCollection.on('backgrid:selected', this.selectModel, this);
			
			this.dataTablePrincipal = new JSetup.DataTable({
				columns : this.getPrincipalColumns(),
				collection : this.principalCollection,
				gridClass : ' table table-striped',
			});
			
			this.dataTableModal = new JSetup.DataTable({
				columns : this.getModalColumns(),
				collection : this.modalCollection
			});
		},

		/** Called after DOM´s ready.*/
		onShowView :  function() {
			var that = this;
	
	
	
	
 		    that.dataTablePrincipalRegion.show(that.dataTablePrincipal);
			that.dataTableModalRegion.show(that.dataTableModal);
			that.ui.modalScreen.on('show.bs.modal', function() {
				that.search();
			});
		},
		
		search : function() {
			var that = this;
			this.modalCollection.filterQueryParams = {
	    		name : this.ui.inputModalName.escape(),
	    		username : this.ui.inputModalUsername.escape(),
	    		email : this.ui.inputModalEmail.escape(),
			};

			this.modalCollection.getFirstPage({
				resetState : true,
				success : function(_coll, _resp, _opt) {
					//caso queira algum tratamento de sucesso adicional
				},
				error : function(_coll, _resp, _opt) {
					console.error(_coll, _resp, _opt)
				},
			});
		},

		getJsonValue : function() {
			return this.principalCollection && this.principalCollection.fullCollection && this.principalCollection.fullCollection.toJSON();
		},
				
		getValue : function() {
			return (this.principalCollection && this.principalCollection.fullCollection )
		},

		setValue : function(collection) {
			this.principalCollection = collection; 
		},

		clear : function() {
			this.$el.find('input[type=checkbox]').prop('checked', false);
			this.principalCollection.reset();
		},

		clearModal : function() {
			this.$el.find('input[type=checkbox]').prop('checked', false);
    		this.ui.inputModalName.val(''),
    		this.ui.inputModalUsername.val(''),
    		this.ui.inputModalEmail.val(''),
    		this.ui.inputModalPassword.val(''),
    		this.ui.inputModalEnable.val(''),
    		this.ui.inputModalImage.val(''),
			this.modalCollection.reset();
		},
		
		selectModel : function(model, checked) {
			if (checked) {
				if (model.get && model.get('id')) {
					this.principalCollection.add(model)
				}
			} else {
				this.principalCollection.remove(model);
			}
		},

		endFetch : function(_collection) {

			var that = this;

			this.ui.searchButton.button('reset');

			this.modalCollection.each(function(model) {
				if (that.principalCollection.findWhere({
					id : model.get('id')
				})) {
					model.trigger("backgrid:select", model, true);
				}
			});
		},
		
		getPrincipalColumns : function() {
			var that = this;
			var columns = [	

			{
				name : "name",
				sortable : false,
				editable : false,
				label 	 : "Nome",
				cell : JSetup.CustomStringCell
			}, 
			{
				name : "username",
				sortable : false,
				editable : false,
				label 	 : "Username",
				cell : JSetup.CustomStringCell
			}, 
			{
				name : "email",
				sortable : false,
				editable : false,
				label 	 : "E-mail",
				cell : JSetup.CustomStringCell
			}, 
			{
				name : "acoes",
				label : "Deletar",
				editable : false,
				sortable : false,
				cell : JSetup.ActionCell.extend({
					buttons : that.getCellPrincipalButtons(),
					context : that,
				})
			}];
			return columns;
		},
		
		getCellPrincipalButtons : function() {
			var that = this;
			var buttons = [];

			buttons.push({
				id : 'delete_button',
				type : 'danger',
				icon : 'fa-trash',
				hint : 'Remover Usuário',
				onClick : that.deleteModel,
			});

			return buttons;
		},

		deleteModel : function(model) {
			var that = this;
			
			util.confirm({
				title : "Importante",
				text : "Tem certeza que deseja remover o registro [ " + model.get('id') + " ] ?",
				onConfirm : function() {
					that.principalCollection.remove(model);
					util.alert({title : "Concluido", text : "Registro removido com sucesso!"});
				}
			});			
		},
		
		getModalColumns : function() {
			var columns = [	
			{
				name : "",
				cell : "select-row",
				headerCell : "select-all"
			}, 
			{
				name : "name",
				sortable : true,
				editable : false,
				label 	 : "Nome",
				cell : JSetup.CustomStringCell,
			}, 
			{
				name : "username",
				sortable : true,
				editable : false,
				label 	 : "Username",
				cell : JSetup.CustomStringCell,
			}, 
			{
				name : "email",
				sortable : true,
				editable : false,
				label 	 : "E-mail",
				cell : JSetup.CustomStringCell,
			}, 
			];
			return columns;
		},

		startFetch : function() {
			this.ui.loadButton.button('loading')
		},
		
		stopFetch : function() {
			var that = this;
			this.ui.loadButton.button('reset')

			this.modalCollection.each(function(model) {
				if (that.principalCollection.findWhere({
					id : model.get('id')
				})) {
					model.trigger("backgrid:select", model, true);
				}
			});
			util.scrollDownModal();
		},		
	});

	return MultiselectModalUser
});

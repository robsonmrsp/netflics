package com.robsonmrsp.netflics.utils;

import java.util.ArrayList;

import java.util.List;


import com.robsonmrsp.netflics.core.utils.DateUtil;

import com.robsonmrsp.netflics.json.JsonGenre;
import com.robsonmrsp.netflics.model.Genre;
import com.robsonmrsp.netflics.json.JsonMovie;
import com.robsonmrsp.netflics.model.Movie;
import com.robsonmrsp.netflics.json.JsonLanguage;
import com.robsonmrsp.netflics.model.Language;
import com.robsonmrsp.netflics.json.JsonActor;
import com.robsonmrsp.netflics.model.Actor;
import com.robsonmrsp.netflics.json.JsonUser;
import com.robsonmrsp.netflics.model.User;
import com.robsonmrsp.netflics.json.JsonRole;
import com.robsonmrsp.netflics.model.Role;
import com.robsonmrsp.netflics.json.JsonPermission;
import com.robsonmrsp.netflics.model.Permission;
import com.robsonmrsp.netflics.json.JsonGroup;
import com.robsonmrsp.netflics.model.Group;
import com.robsonmrsp.netflics.json.JsonItem;
import com.robsonmrsp.netflics.model.Item;
import com.robsonmrsp.netflics.model.User;
import com.robsonmrsp.netflics.json.JsonUser;

/* generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56 */
public class Parser {

	//converte de entidade para json --------------------
	private static JsonGenre toBasicJson(Genre genre) {
		JsonGenre jsonGenre = new JsonGenre();
		applyBasicJsonValues(jsonGenre, genre);
		return jsonGenre;
	}
	
	private static Genre toBasicEntity(JsonGenre jsonGenre) {
		Genre genre = new Genre();
		applyBasicEntityValues(genre, jsonGenre);
		return genre;
	}
	
	private static void applyBasicJsonValues(JsonGenre jsonGenre, Genre genre) {
		jsonGenre.setId(genre.getId());
	    jsonGenre.setName(genre.getName());
	}	
	private static void applyBasicEntityValues(Genre genre, JsonGenre jsonGenre) {
		genre.setId(jsonGenre.getId());
		genre.setName(jsonGenre.getName());
	}	
	
	public static JsonGenre toJson(Genre genre) {
		if(genre == null){
			return null;
		}
		
		JsonGenre jsonGenre = new JsonGenre();
		
		applyBasicJsonValues(jsonGenre, genre);

		return jsonGenre;
	}


	public static Genre apply(Genre genre, JsonGenre jsonGenre) {
	
		if(genre ==  null)
			genre = new Genre();
		
		applyBasicEntityValues(genre, jsonGenre) ;

		return genre;
		
	}		
	public static Genre toEntity(JsonGenre jsonGenre) {
		Genre genre = new Genre();
		
		return apply(genre, jsonGenre);
	}		
	
	public static List<JsonGenre> toListJsonGenres(List<Genre> all) {
		List<JsonGenre> jsonGenres = new ArrayList<JsonGenre>();
		for (Genre genre : all) {
			jsonGenres.add(toJson(genre));
		}
		return jsonGenres;
	}
	//converte de entidade para json --------------------
	private static JsonMovie toBasicJson(Movie movie) {
		JsonMovie jsonMovie = new JsonMovie();
		applyBasicJsonValues(jsonMovie, movie);
		return jsonMovie;
	}
	
	private static Movie toBasicEntity(JsonMovie jsonMovie) {
		Movie movie = new Movie();
		applyBasicEntityValues(movie, jsonMovie);
		return movie;
	}
	
	private static void applyBasicJsonValues(JsonMovie jsonMovie, Movie movie) {
		jsonMovie.setId(movie.getId());
	    jsonMovie.setSinopsis(movie.getSinopsis());
	    jsonMovie.setReleaseDate(movie.getReleaseDate());
	    jsonMovie.setBudget(movie.getBudget());
	    jsonMovie.setTitle(movie.getTitle());
	}	
	private static void applyBasicEntityValues(Movie movie, JsonMovie jsonMovie) {
		movie.setId(jsonMovie.getId());
		movie.setSinopsis(jsonMovie.getSinopsis());
		movie.setReleaseDate(jsonMovie.getReleaseDate());
		movie.setBudget(jsonMovie.getBudget());
		movie.setTitle(jsonMovie.getTitle());
	}	
	
	public static JsonMovie toJson(Movie movie) {
		if(movie == null){
			return null;
		}
		
		JsonMovie jsonMovie = new JsonMovie();
		
		applyBasicJsonValues(jsonMovie, movie);

		List<Genre> listGenres = movie.getGenres();
		if (listGenres != null) {
			for (Genre loopGenre : listGenres) {
				jsonMovie.getGenres().add(toBasicJson(loopGenre));
			}
		}
		List<Actor> listCast = movie.getCast();
		if (listCast != null) {
			for (Actor loopActor : listCast) {
				jsonMovie.getCast().add(toBasicJson(loopActor));
			}
		}
		Language language_ = movie.getLanguage();
		if (language_ != null) {
			jsonMovie.setLanguage(toBasicJson(language_));
		}
		return jsonMovie;
	}


	public static Movie apply(Movie movie, JsonMovie jsonMovie) {
	
		if(movie ==  null)
			movie = new Movie();
		
		applyBasicEntityValues(movie, jsonMovie) ;

		ArrayList<JsonGenre> listGenres = jsonMovie.getGenres();
		if (listGenres != null) {
			for (JsonGenre loopJsonGenre : listGenres) {
				movie.addGenres(toBasicEntity(loopJsonGenre));
			}
		}
					
		ArrayList<JsonActor> listCast = jsonMovie.getCast();
		if (listCast != null) {
			for (JsonActor loopJsonActor : listCast) {
				movie.addCast(toBasicEntity(loopJsonActor));
			}
		}
					
		JsonLanguage language_ = jsonMovie.getLanguage();
		if (language_ != null) {
			movie.setLanguage(toBasicEntity(language_));
		}	
		return movie;
		
	}		
	public static Movie toEntity(JsonMovie jsonMovie) {
		Movie movie = new Movie();
		
		return apply(movie, jsonMovie);
	}		
	
	public static List<JsonMovie> toListJsonMovies(List<Movie> all) {
		List<JsonMovie> jsonMovies = new ArrayList<JsonMovie>();
		for (Movie movie : all) {
			jsonMovies.add(toJson(movie));
		}
		return jsonMovies;
	}
	//converte de entidade para json --------------------
	private static JsonLanguage toBasicJson(Language language) {
		JsonLanguage jsonLanguage = new JsonLanguage();
		applyBasicJsonValues(jsonLanguage, language);
		return jsonLanguage;
	}
	
	private static Language toBasicEntity(JsonLanguage jsonLanguage) {
		Language language = new Language();
		applyBasicEntityValues(language, jsonLanguage);
		return language;
	}
	
	private static void applyBasicJsonValues(JsonLanguage jsonLanguage, Language language) {
		jsonLanguage.setId(language.getId());
	    jsonLanguage.setName(language.getName());
	}	
	private static void applyBasicEntityValues(Language language, JsonLanguage jsonLanguage) {
		language.setId(jsonLanguage.getId());
		language.setName(jsonLanguage.getName());
	}	
	
	public static JsonLanguage toJson(Language language) {
		if(language == null){
			return null;
		}
		
		JsonLanguage jsonLanguage = new JsonLanguage();
		
		applyBasicJsonValues(jsonLanguage, language);

		List<Movie> listMovies = language.getMovies();
		if (listMovies != null) {
			for (Movie loopMovie : listMovies) {
				jsonLanguage.getMovies().add(toBasicJson(loopMovie));
			}
		}
		return jsonLanguage;
	}


	public static Language apply(Language language, JsonLanguage jsonLanguage) {
	
		if(language ==  null)
			language = new Language();
		
		applyBasicEntityValues(language, jsonLanguage) ;

		ArrayList<JsonMovie> listMovies = jsonLanguage.getMovies();
		if (listMovies != null) {
			for (JsonMovie loopJsonMovie : listMovies) {
				language.addMovies(toBasicEntity(loopJsonMovie));
			}
		}
					
		return language;
		
	}		
	public static Language toEntity(JsonLanguage jsonLanguage) {
		Language language = new Language();
		
		return apply(language, jsonLanguage);
	}		
	
	public static List<JsonLanguage> toListJsonLanguages(List<Language> all) {
		List<JsonLanguage> jsonLanguages = new ArrayList<JsonLanguage>();
		for (Language language : all) {
			jsonLanguages.add(toJson(language));
		}
		return jsonLanguages;
	}
	//converte de entidade para json --------------------
	private static JsonActor toBasicJson(Actor actor) {
		JsonActor jsonActor = new JsonActor();
		applyBasicJsonValues(jsonActor, actor);
		return jsonActor;
	}
	
	private static Actor toBasicEntity(JsonActor jsonActor) {
		Actor actor = new Actor();
		applyBasicEntityValues(actor, jsonActor);
		return actor;
	}
	
	private static void applyBasicJsonValues(JsonActor jsonActor, Actor actor) {
		jsonActor.setId(actor.getId());
	    jsonActor.setBirthDate(actor.getBirthDate());
	    jsonActor.setName(actor.getName());
	}	
	private static void applyBasicEntityValues(Actor actor, JsonActor jsonActor) {
		actor.setId(jsonActor.getId());
		actor.setBirthDate(jsonActor.getBirthDate());
		actor.setName(jsonActor.getName());
	}	
	
	public static JsonActor toJson(Actor actor) {
		if(actor == null){
			return null;
		}
		
		JsonActor jsonActor = new JsonActor();
		
		applyBasicJsonValues(jsonActor, actor);

		return jsonActor;
	}


	public static Actor apply(Actor actor, JsonActor jsonActor) {
	
		if(actor ==  null)
			actor = new Actor();
		
		applyBasicEntityValues(actor, jsonActor) ;

		return actor;
		
	}		
	public static Actor toEntity(JsonActor jsonActor) {
		Actor actor = new Actor();
		
		return apply(actor, jsonActor);
	}		
	
	public static List<JsonActor> toListJsonActors(List<Actor> all) {
		List<JsonActor> jsonActors = new ArrayList<JsonActor>();
		for (Actor actor : all) {
			jsonActors.add(toJson(actor));
		}
		return jsonActors;
	}
	//converte de entidade para json --------------------
	private static JsonUser toBasicJson(User user) {
		JsonUser jsonUser = new JsonUser();
		applyBasicJsonValues(jsonUser, user);
		return jsonUser;
	}
	
	private static User toBasicEntity(JsonUser jsonUser) {
		User user = new User();
		applyBasicEntityValues(user, jsonUser);
		return user;
	}
	
	private static void applyBasicJsonValues(JsonUser jsonUser, User user) {
		jsonUser.setId(user.getId());
	    jsonUser.setName(user.getName());
	    jsonUser.setUsername(user.getUsername());
	    jsonUser.setEmail(user.getEmail());
	    jsonUser.setPassword(user.getPassword());
	    jsonUser.setEnable(user.getEnable());
	    jsonUser.setImage(user.getImage());
	}	
	private static void applyBasicEntityValues(User user, JsonUser jsonUser) {
		user.setId(jsonUser.getId());
		user.setName(jsonUser.getName());
		user.setUsername(jsonUser.getUsername());
		user.setEmail(jsonUser.getEmail());
		user.setPassword(jsonUser.getPassword());
		user.setEnable(jsonUser.getEnable());
		user.setImage(jsonUser.getImage());
	}	
	
	public static JsonUser toJson(User user) {
		if(user == null){
			return null;
		}
		
		JsonUser jsonUser = new JsonUser();
		
		applyBasicJsonValues(jsonUser, user);

		List<Role> listRoles = user.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonUser.getRoles().add(toBasicJson(loopRole));
			}
		}

		return jsonUser;
	}


	public static User apply(User user, JsonUser jsonUser) {
	
		if(user ==  null)
			user = new User();
		
		applyBasicEntityValues(user, jsonUser) ;

		ArrayList<JsonRole> listRoles = jsonUser.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				user.addRoles(toBasicEntity(loopJsonRole));
			}
		}
		return user;
		
	}		
	public static User toEntity(JsonUser jsonUser) {
		User user = new User();
		
		return apply(user, jsonUser);
	}		
	
	public static List<JsonUser> toListJsonUsers(List<User> all) {
		List<JsonUser> jsonUsers = new ArrayList<JsonUser>();
		for (User user : all) {
			jsonUsers.add(toJson(user));
		}
		return jsonUsers;
	}
	//converte de entidade para json --------------------
	private static JsonRole toBasicJson(Role role) {
		JsonRole jsonRole = new JsonRole();
		applyBasicJsonValues(jsonRole, role);
		return jsonRole;
	}
	
	private static Role toBasicEntity(JsonRole jsonRole) {
		Role role = new Role();
		applyBasicEntityValues(role, jsonRole);
		return role;
	}
	
	private static void applyBasicJsonValues(JsonRole jsonRole, Role role) {
		jsonRole.setId(role.getId());
	    jsonRole.setAuthority(role.getAuthority());
	    jsonRole.setDescription(role.getDescription());
	}	
	private static void applyBasicEntityValues(Role role, JsonRole jsonRole) {
		role.setId(jsonRole.getId());
		role.setAuthority(jsonRole.getAuthority());
		role.setDescription(jsonRole.getDescription());
	}	
	
	public static JsonRole toJson(Role role) {
		if(role == null){
			return null;
		}
		
		JsonRole jsonRole = new JsonRole();
		
		applyBasicJsonValues(jsonRole, role);

		List<User> listUsers = role.getUsers();
		if (listUsers != null) {
			for (User loopUser : listUsers) {
				jsonRole.getUsers().add(toBasicJson(loopUser));
			}
		}			

		List<Permission> listPermissions = role.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonRole.getPermissions().add(toBasicJson(loopPermission));
			}
		}

		List<Group> listGroups = role.getGroups();
		if (listGroups != null) {
			for (Group loopGroup : listGroups) {
				jsonRole.getGroups().add(toBasicJson(loopGroup));
			}
		}

		return jsonRole;
	}


	public static Role apply(Role role, JsonRole jsonRole) {
	
		if(role ==  null)
			role = new Role();
		
		applyBasicEntityValues(role, jsonRole) ;

		ArrayList<JsonUser> listUsers = jsonRole.getUsers();			
		if (listUsers != null) {
			for (JsonUser loopJsonUser : listUsers) {
				role.addUsers(toBasicEntity(loopJsonUser));
			}
		}
			
		ArrayList<JsonPermission> listPermissions = jsonRole.getPermissions();			
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				role.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
		ArrayList<JsonGroup> listGroups = jsonRole.getGroups();			
		if (listGroups != null) {
			for (JsonGroup loopJsonGroup : listGroups) {
				role.addGroups(toBasicEntity(loopJsonGroup));
			}
		}
		return role;
		
	}		
	public static Role toEntity(JsonRole jsonRole) {
		Role role = new Role();
		
		return apply(role, jsonRole);
	}		
	
	public static List<JsonRole> toListJsonRoles(List<Role> all) {
		List<JsonRole> jsonRoles = new ArrayList<JsonRole>();
		for (Role role : all) {
			jsonRoles.add(toJson(role));
		}
		return jsonRoles;
	}
	//converte de entidade para json --------------------
	private static JsonPermission toBasicJson(Permission permission) {
		JsonPermission jsonPermission = new JsonPermission();
		applyBasicJsonValues(jsonPermission, permission);
		return jsonPermission;
	}
	
	private static Permission toBasicEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		applyBasicEntityValues(permission, jsonPermission);
		return permission;
	}
	
	private static void applyBasicJsonValues(JsonPermission jsonPermission, Permission permission) {
		jsonPermission.setId(permission.getId());
	    jsonPermission.setName(permission.getName());
	    jsonPermission.setDescription(permission.getDescription());
	    jsonPermission.setOperation(permission.getOperation());
	    jsonPermission.setTagReminder(permission.getTagReminder());
	}	
	private static void applyBasicEntityValues(Permission permission, JsonPermission jsonPermission) {
		permission.setId(jsonPermission.getId());
		permission.setName(jsonPermission.getName());
		permission.setDescription(jsonPermission.getDescription());
		permission.setOperation(jsonPermission.getOperation());
		permission.setTagReminder(jsonPermission.getTagReminder());
	}	
	
	public static JsonPermission toJson(Permission permission) {
		if(permission == null){
			return null;
		}
		
		JsonPermission jsonPermission = new JsonPermission();
		
		applyBasicJsonValues(jsonPermission, permission);

		List<Role> listRoles = permission.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonPermission.getRoles().add(toBasicJson(loopRole));
			}
		}			

		List<Group> listGroups = permission.getGroups();
		if (listGroups != null) {
			for (Group loopGroup : listGroups) {
				jsonPermission.getGroups().add(toBasicJson(loopGroup));
			}
		}			

		Item item_ = permission.getItem();
		if (item_ != null) {
			jsonPermission.setItem(toBasicJson(item_));
		}
		return jsonPermission;
	}


	public static Permission apply(Permission permission, JsonPermission jsonPermission) {
	
		if(permission ==  null)
			permission = new Permission();
		
		applyBasicEntityValues(permission, jsonPermission) ;

		ArrayList<JsonRole> listRoles = jsonPermission.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				permission.addRoles(toBasicEntity(loopJsonRole));
			}
		}
			
		ArrayList<JsonGroup> listGroups = jsonPermission.getGroups();			
		if (listGroups != null) {
			for (JsonGroup loopJsonGroup : listGroups) {
				permission.addGroups(toBasicEntity(loopJsonGroup));
			}
		}
			
		JsonItem item_ = jsonPermission.getItem();
		if (item_ != null) {
			permission.setItem(toBasicEntity(item_));
		}	
		return permission;
		
	}		
	public static Permission toEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		
		return apply(permission, jsonPermission);
	}		
	
	public static List<JsonPermission> toListJsonPermissions(List<Permission> all) {
		List<JsonPermission> jsonPermissions = new ArrayList<JsonPermission>();
		for (Permission permission : all) {
			jsonPermissions.add(toJson(permission));
		}
		return jsonPermissions;
	}
	//converte de entidade para json --------------------
	private static JsonGroup toBasicJson(Group group) {
		JsonGroup jsonGroup = new JsonGroup();
		applyBasicJsonValues(jsonGroup, group);
		return jsonGroup;
	}
	
	private static Group toBasicEntity(JsonGroup jsonGroup) {
		Group group = new Group();
		applyBasicEntityValues(group, jsonGroup);
		return group;
	}
	
	private static void applyBasicJsonValues(JsonGroup jsonGroup, Group group) {
		jsonGroup.setId(group.getId());
	    jsonGroup.setName(group.getName());
	    jsonGroup.setDescription(group.getDescription());
	}	
	private static void applyBasicEntityValues(Group group, JsonGroup jsonGroup) {
		group.setId(jsonGroup.getId());
		group.setName(jsonGroup.getName());
		group.setDescription(jsonGroup.getDescription());
	}	
	
	public static JsonGroup toJson(Group group) {
		if(group == null){
			return null;
		}
		
		JsonGroup jsonGroup = new JsonGroup();
		
		applyBasicJsonValues(jsonGroup, group);

		List<Role> listRoles = group.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonGroup.getRoles().add(toBasicJson(loopRole));
			}
		}			

		List<Permission> listPermissions = group.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonGroup.getPermissions().add(toBasicJson(loopPermission));
			}
		}

		return jsonGroup;
	}


	public static Group apply(Group group, JsonGroup jsonGroup) {
	
		if(group ==  null)
			group = new Group();
		
		applyBasicEntityValues(group, jsonGroup) ;

		ArrayList<JsonRole> listRoles = jsonGroup.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				group.addRoles(toBasicEntity(loopJsonRole));
			}
		}
			
		ArrayList<JsonPermission> listPermissions = jsonGroup.getPermissions();			
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				group.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
		return group;
		
	}		
	public static Group toEntity(JsonGroup jsonGroup) {
		Group group = new Group();
		
		return apply(group, jsonGroup);
	}		
	
	public static List<JsonGroup> toListJsonGroups(List<Group> all) {
		List<JsonGroup> jsonGroups = new ArrayList<JsonGroup>();
		for (Group group : all) {
			jsonGroups.add(toJson(group));
		}
		return jsonGroups;
	}
	//converte de entidade para json --------------------
	private static JsonItem toBasicJson(Item item) {
		JsonItem jsonItem = new JsonItem();
		applyBasicJsonValues(jsonItem, item);
		return jsonItem;
	}
	
	private static Item toBasicEntity(JsonItem jsonItem) {
		Item item = new Item();
		applyBasicEntityValues(item, jsonItem);
		return item;
	}
	
	private static void applyBasicJsonValues(JsonItem jsonItem, Item item) {
		jsonItem.setId(item.getId());
	    jsonItem.setName(item.getName());
	    jsonItem.setItemType(item.getItemType());
	    jsonItem.setIdentifier(item.getIdentifier());
	    jsonItem.setDescription(item.getDescription());
	}	
	private static void applyBasicEntityValues(Item item, JsonItem jsonItem) {
		item.setId(jsonItem.getId());
		item.setName(jsonItem.getName());
		item.setItemType(jsonItem.getItemType());
		item.setIdentifier(jsonItem.getIdentifier());
		item.setDescription(jsonItem.getDescription());
	}	
	
	public static JsonItem toJson(Item item) {
		if(item == null){
			return null;
		}
		
		JsonItem jsonItem = new JsonItem();
		
		applyBasicJsonValues(jsonItem, item);

		List<Permission> listPermissions = item.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonItem.getPermissions().add(toBasicJson(loopPermission));
			}
		}
		return jsonItem;
	}


	public static Item apply(Item item, JsonItem jsonItem) {
	
		if(item ==  null)
			item = new Item();
		
		applyBasicEntityValues(item, jsonItem) ;

		ArrayList<JsonPermission> listPermissions = jsonItem.getPermissions();
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				item.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
					
		return item;
		
	}		
	public static Item toEntity(JsonItem jsonItem) {
		Item item = new Item();
		
		return apply(item, jsonItem);
	}		
	
	public static List<JsonItem> toListJsonItems(List<Item> all) {
		List<JsonItem> jsonItems = new ArrayList<JsonItem>();
		for (Item item : all) {
			jsonItems.add(toJson(item));
		}
		return jsonItems;
	}
}
//generated by JSetup v0.95 :  at 4 de jan de 2022 23:12:56